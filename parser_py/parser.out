Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROBA
    CALL
    COMA
    COMILLAS
    DER_EXCLAMACION
    DER_INTERROGACION
    DISTINTO_QUE
    DIVISION
    ENYE
    FALSE
    GUION
    ID
    IGUAL
    IGUALDAD
    IZQ_EXCLAMACION
    IZQ_INTERROGACION
    LETRA
    LPARENTESIS
    MAYOR_IGUAL_QUE
    MAYOR_QUE
    MAYUSCULA
    MENOR_IGUAL_QUE
    MENOR_QUE
    MULTIPLICACION
    PUNTO
    PUNTO_COMA
    RESTA
    RPARENTESIS
    STRING
    SUMA
    TILDE
    TRUE
    UNDERSCORE

Grammar

Rule 0     S' -> program
Rule 1     program -> lista_comentarios code_block
Rule 2     lista_comentarios -> comentario lista_comentarios
Rule 3     lista_comentarios -> empty
Rule 4     comentario -> COMENTARIO
Rule 5     code_block -> group_proc PROC master ( comentario statement code_block ) ;
Rule 6     code_block -> group_proc PROC master ( comentario statement ) ;
Rule 7     master -> MASTER
Rule 8     group_proc -> PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
Rule 9     group_proc -> PROC VARIABLE ( COMENTARIO statement ) ; group_proc
Rule 10    group_proc -> empty
Rule 11    operador -> ADD
Rule 12    operador -> SUB
Rule 13    operador -> MUL
Rule 14    operador -> DIV
Rule 15    statement -> new_variable_statement
Rule 16    statement -> values_statement
Rule 17    statement -> alter_statement
Rule 18    statement -> alterb_statement
Rule 19    statement -> condition_statement
Rule 20    statement -> istrue_statement
Rule 21    statement -> repeat_statement
Rule 22    statement -> until_statement
Rule 23    statement -> while_statement
Rule 24    statement -> case_statement
Rule 25    statement -> printvalues_statement
Rule 26    statement -> signal_statement
Rule 27    statement -> viewsignal_statement
Rule 28    new_variable_statement -> NEW VARIABLE , ( DATATYPE , value ) ;
Rule 29    values_statement -> VALUES ( VARIABLE , value ) ;
Rule 30    alter_statement -> ALTER ( VARIABLE , operador , value ) ;
Rule 31    alterb_statement -> ALTERB ( VARIABLE ) ;
Rule 32    condition_statement -> expression COND_NUMERICA expression
Rule 33    istrue_statement -> ISTRUE ( VARIABLE ) ;
Rule 34    repeat_statement -> REPEAT ( code_block break_statement ) ;
Rule 35    break_statement -> BREAK ;
Rule 36    break_statement -> empty
Rule 37    until_statement -> UNTIL code_block condition ;
Rule 38    condition -> expression COND_NUMERICA expression
Rule 39    while_statement -> WHILE expression ( code_block ) ;
Rule 40    case_statement -> CASE VARIABLE case_when_statements else_statement ;
Rule 41    case_when_statements -> case_when_statement case_when_statements
Rule 42    case_when_statements -> empty
Rule 43    case_when_statement -> WHEN value THEN code_block
Rule 44    else_statement -> ELSE code_block
Rule 45    else_statement -> empty
Rule 46    printvalues_statement -> PRINTVALUES ( VARIABLE ) ;
Rule 47    signal_statement -> SIGNAL ( VARIABLE , value ) ;
Rule 48    viewsignal_statement -> VIEWSIGNAL ( VARIABLE ) ;
Rule 49    expression -> value
Rule 50    expression -> VARIABLE
Rule 51    expression -> ( expression )
Rule 52    expression -> expression + expression
Rule 53    expression -> expression - expression
Rule 54    expression -> expression * expression
Rule 55    expression -> expression / expression
Rule 56    value -> NUMERO
Rule 57    value -> BOOL
Rule 58    empty -> <empty>

Terminals, with rules where they appear

(                    : 5 6 8 9 28 29 30 31 33 34 39 46 47 48 51
)                    : 5 6 8 9 28 29 30 31 33 34 39 46 47 48 51
*                    : 54
+                    : 52
,                    : 28 28 29 30 30 47
-                    : 53
/                    : 55
;                    : 5 6 8 9 28 29 30 31 33 34 35 37 39 40 46 47 48
ADD                  : 11
ALTER                : 30
ALTERB               : 31
ARROBA               : 
BOOL                 : 57
BREAK                : 35
CALL                 : 
CASE                 : 40
COMA                 : 
COMENTARIO           : 4 8 9
COMILLAS             : 
COND_NUMERICA        : 32 38
DATATYPE             : 28
DER_EXCLAMACION      : 
DER_INTERROGACION    : 
DISTINTO_QUE         : 
DIV                  : 14
DIVISION             : 
ELSE                 : 44
ENYE                 : 
FALSE                : 
GUION                : 
ID                   : 
IGUAL                : 
IGUALDAD             : 
ISTRUE               : 33
IZQ_EXCLAMACION      : 
IZQ_INTERROGACION    : 
LETRA                : 
LPARENTESIS          : 
MASTER               : 7
MAYOR_IGUAL_QUE      : 
MAYOR_QUE            : 
MAYUSCULA            : 
MENOR_IGUAL_QUE      : 
MENOR_QUE            : 
MUL                  : 13
MULTIPLICACION       : 
NEW                  : 28
NUMERO               : 56
PRINTVALUES          : 46
PROC                 : 5 6 8 9
PUNTO                : 
PUNTO_COMA           : 
REPEAT               : 34
RESTA                : 
RPARENTESIS          : 
SIGNAL               : 47
STRING               : 
SUB                  : 12
SUMA                 : 
THEN                 : 43
TILDE                : 
TRUE                 : 
UNDERSCORE           : 
UNTIL                : 37
VALUES               : 29
VARIABLE             : 8 9 28 29 30 31 33 40 46 47 48 50
VIEWSIGNAL           : 48
WHEN                 : 43
WHILE                : 39
error                : 

Nonterminals, with rules where they appear

alter_statement      : 17
alterb_statement     : 18
break_statement      : 34
case_statement       : 24
case_when_statement  : 41
case_when_statements : 40 41
code_block           : 1 5 8 34 37 39 43 44
comentario           : 2 5 6
condition            : 37
condition_statement  : 19
else_statement       : 40
empty                : 3 10 36 42 45
expression           : 32 32 38 38 39 51 52 52 53 53 54 54 55 55
group_proc           : 5 6 8 9
istrue_statement     : 20
lista_comentarios    : 1 2
master               : 5 6
new_variable_statement : 15
operador             : 30
printvalues_statement : 25
program              : 0
repeat_statement     : 21
signal_statement     : 26
statement            : 5 6 8 9
until_statement      : 22
value                : 28 29 30 43 47 49
values_statement     : 16
viewsignal_statement : 27
while_statement      : 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . lista_comentarios code_block
    (2) lista_comentarios -> . comentario lista_comentarios
    (3) lista_comentarios -> . empty
    (4) comentario -> . COMENTARIO
    (58) empty -> .

    COMENTARIO      shift and go to state 5
    PROC            reduce using rule 58 (empty -> .)

    program                        shift and go to state 1
    lista_comentarios              shift and go to state 2
    comentario                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> lista_comentarios . code_block
    (5) code_block -> . group_proc PROC master ( comentario statement code_block ) ;
    (6) code_block -> . group_proc PROC master ( comentario statement ) ;
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    code_block                     shift and go to state 6
    group_proc                     shift and go to state 7
    empty                          shift and go to state 9

state 3

    (2) lista_comentarios -> comentario . lista_comentarios
    (2) lista_comentarios -> . comentario lista_comentarios
    (3) lista_comentarios -> . empty
    (4) comentario -> . COMENTARIO
    (58) empty -> .

    COMENTARIO      shift and go to state 5
    PROC            reduce using rule 58 (empty -> .)

    comentario                     shift and go to state 3
    lista_comentarios              shift and go to state 10
    empty                          shift and go to state 4

state 4

    (3) lista_comentarios -> empty .

    PROC            reduce using rule 3 (lista_comentarios -> empty .)


state 5

    (4) comentario -> COMENTARIO .

    COMENTARIO      reduce using rule 4 (comentario -> COMENTARIO .)
    PROC            reduce using rule 4 (comentario -> COMENTARIO .)
    NEW             reduce using rule 4 (comentario -> COMENTARIO .)
    VALUES          reduce using rule 4 (comentario -> COMENTARIO .)
    ALTER           reduce using rule 4 (comentario -> COMENTARIO .)
    ALTERB          reduce using rule 4 (comentario -> COMENTARIO .)
    ISTRUE          reduce using rule 4 (comentario -> COMENTARIO .)
    REPEAT          reduce using rule 4 (comentario -> COMENTARIO .)
    UNTIL           reduce using rule 4 (comentario -> COMENTARIO .)
    WHILE           reduce using rule 4 (comentario -> COMENTARIO .)
    CASE            reduce using rule 4 (comentario -> COMENTARIO .)
    PRINTVALUES     reduce using rule 4 (comentario -> COMENTARIO .)
    SIGNAL          reduce using rule 4 (comentario -> COMENTARIO .)
    VIEWSIGNAL      reduce using rule 4 (comentario -> COMENTARIO .)
    VARIABLE        reduce using rule 4 (comentario -> COMENTARIO .)
    (               reduce using rule 4 (comentario -> COMENTARIO .)
    NUMERO          reduce using rule 4 (comentario -> COMENTARIO .)
    BOOL            reduce using rule 4 (comentario -> COMENTARIO .)


state 6

    (1) program -> lista_comentarios code_block .

    $end            reduce using rule 1 (program -> lista_comentarios code_block .)


state 7

    (5) code_block -> group_proc . PROC master ( comentario statement code_block ) ;
    (6) code_block -> group_proc . PROC master ( comentario statement ) ;

    PROC            shift and go to state 11


state 8

    (8) group_proc -> PROC . VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> PROC . VARIABLE ( COMENTARIO statement ) ; group_proc

    VARIABLE        shift and go to state 12


state 9

    (10) group_proc -> empty .

    PROC            reduce using rule 10 (group_proc -> empty .)


state 10

    (2) lista_comentarios -> comentario lista_comentarios .

    PROC            reduce using rule 2 (lista_comentarios -> comentario lista_comentarios .)


state 11

    (5) code_block -> group_proc PROC . master ( comentario statement code_block ) ;
    (6) code_block -> group_proc PROC . master ( comentario statement ) ;
    (7) master -> . MASTER

    MASTER          shift and go to state 14

    master                         shift and go to state 13

state 12

    (8) group_proc -> PROC VARIABLE . ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> PROC VARIABLE . ( COMENTARIO statement ) ; group_proc

    (               shift and go to state 15


state 13

    (5) code_block -> group_proc PROC master . ( comentario statement code_block ) ;
    (6) code_block -> group_proc PROC master . ( comentario statement ) ;

    (               shift and go to state 16


state 14

    (7) master -> MASTER .

    (               reduce using rule 7 (master -> MASTER .)


state 15

    (8) group_proc -> PROC VARIABLE ( . COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> PROC VARIABLE ( . COMENTARIO statement ) ; group_proc

    COMENTARIO      shift and go to state 17


state 16

    (5) code_block -> group_proc PROC master ( . comentario statement code_block ) ;
    (6) code_block -> group_proc PROC master ( . comentario statement ) ;
    (4) comentario -> . COMENTARIO

    COMENTARIO      shift and go to state 5

    comentario                     shift and go to state 18

state 17

    (8) group_proc -> PROC VARIABLE ( COMENTARIO . statement code_block ) ; group_proc
    (9) group_proc -> PROC VARIABLE ( COMENTARIO . statement ) ; group_proc
    (15) statement -> . new_variable_statement
    (16) statement -> . values_statement
    (17) statement -> . alter_statement
    (18) statement -> . alterb_statement
    (19) statement -> . condition_statement
    (20) statement -> . istrue_statement
    (21) statement -> . repeat_statement
    (22) statement -> . until_statement
    (23) statement -> . while_statement
    (24) statement -> . case_statement
    (25) statement -> . printvalues_statement
    (26) statement -> . signal_statement
    (27) statement -> . viewsignal_statement
    (28) new_variable_statement -> . NEW VARIABLE , ( DATATYPE , value ) ;
    (29) values_statement -> . VALUES ( VARIABLE , value ) ;
    (30) alter_statement -> . ALTER ( VARIABLE , operador , value ) ;
    (31) alterb_statement -> . ALTERB ( VARIABLE ) ;
    (32) condition_statement -> . expression COND_NUMERICA expression
    (33) istrue_statement -> . ISTRUE ( VARIABLE ) ;
    (34) repeat_statement -> . REPEAT ( code_block break_statement ) ;
    (37) until_statement -> . UNTIL code_block condition ;
    (39) while_statement -> . WHILE expression ( code_block ) ;
    (40) case_statement -> . CASE VARIABLE case_when_statements else_statement ;
    (46) printvalues_statement -> . PRINTVALUES ( VARIABLE ) ;
    (47) signal_statement -> . SIGNAL ( VARIABLE , value ) ;
    (48) viewsignal_statement -> . VIEWSIGNAL ( VARIABLE ) ;
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    NEW             shift and go to state 35
    VALUES          shift and go to state 37
    ALTER           shift and go to state 38
    ALTERB          shift and go to state 39
    ISTRUE          shift and go to state 41
    REPEAT          shift and go to state 42
    UNTIL           shift and go to state 43
    WHILE           shift and go to state 44
    CASE            shift and go to state 45
    PRINTVALUES     shift and go to state 46
    SIGNAL          shift and go to state 47
    VIEWSIGNAL      shift and go to state 48
    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    statement                      shift and go to state 21
    new_variable_statement         shift and go to state 22
    values_statement               shift and go to state 23
    alter_statement                shift and go to state 24
    alterb_statement               shift and go to state 25
    condition_statement            shift and go to state 26
    istrue_statement               shift and go to state 27
    repeat_statement               shift and go to state 28
    until_statement                shift and go to state 29
    while_statement                shift and go to state 30
    case_statement                 shift and go to state 31
    printvalues_statement          shift and go to state 32
    signal_statement               shift and go to state 33
    viewsignal_statement           shift and go to state 34
    value                          shift and go to state 36
    expression                     shift and go to state 40

state 18

    (5) code_block -> group_proc PROC master ( comentario . statement code_block ) ;
    (6) code_block -> group_proc PROC master ( comentario . statement ) ;
    (15) statement -> . new_variable_statement
    (16) statement -> . values_statement
    (17) statement -> . alter_statement
    (18) statement -> . alterb_statement
    (19) statement -> . condition_statement
    (20) statement -> . istrue_statement
    (21) statement -> . repeat_statement
    (22) statement -> . until_statement
    (23) statement -> . while_statement
    (24) statement -> . case_statement
    (25) statement -> . printvalues_statement
    (26) statement -> . signal_statement
    (27) statement -> . viewsignal_statement
    (28) new_variable_statement -> . NEW VARIABLE , ( DATATYPE , value ) ;
    (29) values_statement -> . VALUES ( VARIABLE , value ) ;
    (30) alter_statement -> . ALTER ( VARIABLE , operador , value ) ;
    (31) alterb_statement -> . ALTERB ( VARIABLE ) ;
    (32) condition_statement -> . expression COND_NUMERICA expression
    (33) istrue_statement -> . ISTRUE ( VARIABLE ) ;
    (34) repeat_statement -> . REPEAT ( code_block break_statement ) ;
    (37) until_statement -> . UNTIL code_block condition ;
    (39) while_statement -> . WHILE expression ( code_block ) ;
    (40) case_statement -> . CASE VARIABLE case_when_statements else_statement ;
    (46) printvalues_statement -> . PRINTVALUES ( VARIABLE ) ;
    (47) signal_statement -> . SIGNAL ( VARIABLE , value ) ;
    (48) viewsignal_statement -> . VIEWSIGNAL ( VARIABLE ) ;
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    NEW             shift and go to state 35
    VALUES          shift and go to state 37
    ALTER           shift and go to state 38
    ALTERB          shift and go to state 39
    ISTRUE          shift and go to state 41
    REPEAT          shift and go to state 42
    UNTIL           shift and go to state 43
    WHILE           shift and go to state 44
    CASE            shift and go to state 45
    PRINTVALUES     shift and go to state 46
    SIGNAL          shift and go to state 47
    VIEWSIGNAL      shift and go to state 48
    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    statement                      shift and go to state 51
    new_variable_statement         shift and go to state 22
    values_statement               shift and go to state 23
    alter_statement                shift and go to state 24
    alterb_statement               shift and go to state 25
    condition_statement            shift and go to state 26
    istrue_statement               shift and go to state 27
    repeat_statement               shift and go to state 28
    until_statement                shift and go to state 29
    while_statement                shift and go to state 30
    case_statement                 shift and go to state 31
    printvalues_statement          shift and go to state 32
    signal_statement               shift and go to state 33
    viewsignal_statement           shift and go to state 34
    value                          shift and go to state 36
    expression                     shift and go to state 40

state 19

    (50) expression -> VARIABLE .

    COND_NUMERICA   reduce using rule 50 (expression -> VARIABLE .)
    +               reduce using rule 50 (expression -> VARIABLE .)
    -               reduce using rule 50 (expression -> VARIABLE .)
    *               reduce using rule 50 (expression -> VARIABLE .)
    /               reduce using rule 50 (expression -> VARIABLE .)
    )               reduce using rule 50 (expression -> VARIABLE .)
    (               reduce using rule 50 (expression -> VARIABLE .)
    PROC            reduce using rule 50 (expression -> VARIABLE .)
    ;               reduce using rule 50 (expression -> VARIABLE .)


state 20

    (51) expression -> ( . expression )
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    expression                     shift and go to state 52
    value                          shift and go to state 36

state 21

    (8) group_proc -> PROC VARIABLE ( COMENTARIO statement . code_block ) ; group_proc
    (9) group_proc -> PROC VARIABLE ( COMENTARIO statement . ) ; group_proc
    (5) code_block -> . group_proc PROC master ( comentario statement code_block ) ;
    (6) code_block -> . group_proc PROC master ( comentario statement ) ;
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    )               shift and go to state 54
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    code_block                     shift and go to state 53
    group_proc                     shift and go to state 7
    empty                          shift and go to state 9

state 22

    (15) statement -> new_variable_statement .

    )               reduce using rule 15 (statement -> new_variable_statement .)
    PROC            reduce using rule 15 (statement -> new_variable_statement .)


state 23

    (16) statement -> values_statement .

    )               reduce using rule 16 (statement -> values_statement .)
    PROC            reduce using rule 16 (statement -> values_statement .)


state 24

    (17) statement -> alter_statement .

    )               reduce using rule 17 (statement -> alter_statement .)
    PROC            reduce using rule 17 (statement -> alter_statement .)


state 25

    (18) statement -> alterb_statement .

    )               reduce using rule 18 (statement -> alterb_statement .)
    PROC            reduce using rule 18 (statement -> alterb_statement .)


state 26

    (19) statement -> condition_statement .

    )               reduce using rule 19 (statement -> condition_statement .)
    PROC            reduce using rule 19 (statement -> condition_statement .)


state 27

    (20) statement -> istrue_statement .

    )               reduce using rule 20 (statement -> istrue_statement .)
    PROC            reduce using rule 20 (statement -> istrue_statement .)


state 28

    (21) statement -> repeat_statement .

    )               reduce using rule 21 (statement -> repeat_statement .)
    PROC            reduce using rule 21 (statement -> repeat_statement .)


state 29

    (22) statement -> until_statement .

    )               reduce using rule 22 (statement -> until_statement .)
    PROC            reduce using rule 22 (statement -> until_statement .)


state 30

    (23) statement -> while_statement .

    )               reduce using rule 23 (statement -> while_statement .)
    PROC            reduce using rule 23 (statement -> while_statement .)


state 31

    (24) statement -> case_statement .

    )               reduce using rule 24 (statement -> case_statement .)
    PROC            reduce using rule 24 (statement -> case_statement .)


state 32

    (25) statement -> printvalues_statement .

    )               reduce using rule 25 (statement -> printvalues_statement .)
    PROC            reduce using rule 25 (statement -> printvalues_statement .)


state 33

    (26) statement -> signal_statement .

    )               reduce using rule 26 (statement -> signal_statement .)
    PROC            reduce using rule 26 (statement -> signal_statement .)


state 34

    (27) statement -> viewsignal_statement .

    )               reduce using rule 27 (statement -> viewsignal_statement .)
    PROC            reduce using rule 27 (statement -> viewsignal_statement .)


state 35

    (28) new_variable_statement -> NEW . VARIABLE , ( DATATYPE , value ) ;

    VARIABLE        shift and go to state 55


state 36

    (49) expression -> value .

    COND_NUMERICA   reduce using rule 49 (expression -> value .)
    +               reduce using rule 49 (expression -> value .)
    -               reduce using rule 49 (expression -> value .)
    *               reduce using rule 49 (expression -> value .)
    /               reduce using rule 49 (expression -> value .)
    )               reduce using rule 49 (expression -> value .)
    (               reduce using rule 49 (expression -> value .)
    PROC            reduce using rule 49 (expression -> value .)
    ;               reduce using rule 49 (expression -> value .)


state 37

    (29) values_statement -> VALUES . ( VARIABLE , value ) ;

    (               shift and go to state 56


state 38

    (30) alter_statement -> ALTER . ( VARIABLE , operador , value ) ;

    (               shift and go to state 57


state 39

    (31) alterb_statement -> ALTERB . ( VARIABLE ) ;

    (               shift and go to state 58


state 40

    (32) condition_statement -> expression . COND_NUMERICA expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

    COND_NUMERICA   shift and go to state 59
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63


state 41

    (33) istrue_statement -> ISTRUE . ( VARIABLE ) ;

    (               shift and go to state 64


state 42

    (34) repeat_statement -> REPEAT . ( code_block break_statement ) ;

    (               shift and go to state 65


state 43

    (37) until_statement -> UNTIL . code_block condition ;
    (5) code_block -> . group_proc PROC master ( comentario statement code_block ) ;
    (6) code_block -> . group_proc PROC master ( comentario statement ) ;
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    code_block                     shift and go to state 66
    group_proc                     shift and go to state 7
    empty                          shift and go to state 9

state 44

    (39) while_statement -> WHILE . expression ( code_block ) ;
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    expression                     shift and go to state 67
    value                          shift and go to state 36

state 45

    (40) case_statement -> CASE . VARIABLE case_when_statements else_statement ;

    VARIABLE        shift and go to state 68


state 46

    (46) printvalues_statement -> PRINTVALUES . ( VARIABLE ) ;

    (               shift and go to state 69


state 47

    (47) signal_statement -> SIGNAL . ( VARIABLE , value ) ;

    (               shift and go to state 70


state 48

    (48) viewsignal_statement -> VIEWSIGNAL . ( VARIABLE ) ;

    (               shift and go to state 71


state 49

    (56) value -> NUMERO .

    COND_NUMERICA   reduce using rule 56 (value -> NUMERO .)
    +               reduce using rule 56 (value -> NUMERO .)
    -               reduce using rule 56 (value -> NUMERO .)
    *               reduce using rule 56 (value -> NUMERO .)
    /               reduce using rule 56 (value -> NUMERO .)
    )               reduce using rule 56 (value -> NUMERO .)
    (               reduce using rule 56 (value -> NUMERO .)
    PROC            reduce using rule 56 (value -> NUMERO .)
    ;               reduce using rule 56 (value -> NUMERO .)
    THEN            reduce using rule 56 (value -> NUMERO .)


state 50

    (57) value -> BOOL .

    COND_NUMERICA   reduce using rule 57 (value -> BOOL .)
    +               reduce using rule 57 (value -> BOOL .)
    -               reduce using rule 57 (value -> BOOL .)
    *               reduce using rule 57 (value -> BOOL .)
    /               reduce using rule 57 (value -> BOOL .)
    )               reduce using rule 57 (value -> BOOL .)
    (               reduce using rule 57 (value -> BOOL .)
    PROC            reduce using rule 57 (value -> BOOL .)
    ;               reduce using rule 57 (value -> BOOL .)
    THEN            reduce using rule 57 (value -> BOOL .)


state 51

    (5) code_block -> group_proc PROC master ( comentario statement . code_block ) ;
    (6) code_block -> group_proc PROC master ( comentario statement . ) ;
    (5) code_block -> . group_proc PROC master ( comentario statement code_block ) ;
    (6) code_block -> . group_proc PROC master ( comentario statement ) ;
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    )               shift and go to state 73
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    group_proc                     shift and go to state 7
    code_block                     shift and go to state 72
    empty                          shift and go to state 9

state 52

    (51) expression -> ( expression . )
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

    )               shift and go to state 74
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63


state 53

    (8) group_proc -> PROC VARIABLE ( COMENTARIO statement code_block . ) ; group_proc

    )               shift and go to state 75


state 54

    (9) group_proc -> PROC VARIABLE ( COMENTARIO statement ) . ; group_proc

    ;               shift and go to state 76


state 55

    (28) new_variable_statement -> NEW VARIABLE . , ( DATATYPE , value ) ;

    ,               shift and go to state 77


state 56

    (29) values_statement -> VALUES ( . VARIABLE , value ) ;

    VARIABLE        shift and go to state 78


state 57

    (30) alter_statement -> ALTER ( . VARIABLE , operador , value ) ;

    VARIABLE        shift and go to state 79


state 58

    (31) alterb_statement -> ALTERB ( . VARIABLE ) ;

    VARIABLE        shift and go to state 80


state 59

    (32) condition_statement -> expression COND_NUMERICA . expression
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    expression                     shift and go to state 81
    value                          shift and go to state 36

state 60

    (52) expression -> expression + . expression
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    expression                     shift and go to state 82
    value                          shift and go to state 36

state 61

    (53) expression -> expression - . expression
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    expression                     shift and go to state 83
    value                          shift and go to state 36

state 62

    (54) expression -> expression * . expression
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    expression                     shift and go to state 84
    value                          shift and go to state 36

state 63

    (55) expression -> expression / . expression
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    expression                     shift and go to state 85
    value                          shift and go to state 36

state 64

    (33) istrue_statement -> ISTRUE ( . VARIABLE ) ;

    VARIABLE        shift and go to state 86


state 65

    (34) repeat_statement -> REPEAT ( . code_block break_statement ) ;
    (5) code_block -> . group_proc PROC master ( comentario statement code_block ) ;
    (6) code_block -> . group_proc PROC master ( comentario statement ) ;
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    code_block                     shift and go to state 87
    group_proc                     shift and go to state 7
    empty                          shift and go to state 9

state 66

    (37) until_statement -> UNTIL code_block . condition ;
    (38) condition -> . expression COND_NUMERICA expression
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    condition                      shift and go to state 88
    expression                     shift and go to state 89
    value                          shift and go to state 36

state 67

    (39) while_statement -> WHILE expression . ( code_block ) ;
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

    (               shift and go to state 90
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63


state 68

    (40) case_statement -> CASE VARIABLE . case_when_statements else_statement ;
    (41) case_when_statements -> . case_when_statement case_when_statements
    (42) case_when_statements -> . empty
    (43) case_when_statement -> . WHEN value THEN code_block
    (58) empty -> .

    WHEN            shift and go to state 94
    ELSE            reduce using rule 58 (empty -> .)
    ;               reduce using rule 58 (empty -> .)

    case_when_statements           shift and go to state 91
    case_when_statement            shift and go to state 92
    empty                          shift and go to state 93

state 69

    (46) printvalues_statement -> PRINTVALUES ( . VARIABLE ) ;

    VARIABLE        shift and go to state 95


state 70

    (47) signal_statement -> SIGNAL ( . VARIABLE , value ) ;

    VARIABLE        shift and go to state 96


state 71

    (48) viewsignal_statement -> VIEWSIGNAL ( . VARIABLE ) ;

    VARIABLE        shift and go to state 97


state 72

    (5) code_block -> group_proc PROC master ( comentario statement code_block . ) ;

    )               shift and go to state 98


state 73

    (6) code_block -> group_proc PROC master ( comentario statement ) . ;

    ;               shift and go to state 99


state 74

    (51) expression -> ( expression ) .

    COND_NUMERICA   reduce using rule 51 (expression -> ( expression ) .)
    +               reduce using rule 51 (expression -> ( expression ) .)
    -               reduce using rule 51 (expression -> ( expression ) .)
    *               reduce using rule 51 (expression -> ( expression ) .)
    /               reduce using rule 51 (expression -> ( expression ) .)
    )               reduce using rule 51 (expression -> ( expression ) .)
    (               reduce using rule 51 (expression -> ( expression ) .)
    PROC            reduce using rule 51 (expression -> ( expression ) .)
    ;               reduce using rule 51 (expression -> ( expression ) .)


state 75

    (8) group_proc -> PROC VARIABLE ( COMENTARIO statement code_block ) . ; group_proc

    ;               shift and go to state 100


state 76

    (9) group_proc -> PROC VARIABLE ( COMENTARIO statement ) ; . group_proc
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    group_proc                     shift and go to state 101
    empty                          shift and go to state 9

state 77

    (28) new_variable_statement -> NEW VARIABLE , . ( DATATYPE , value ) ;

    (               shift and go to state 102


state 78

    (29) values_statement -> VALUES ( VARIABLE . , value ) ;

    ,               shift and go to state 103


state 79

    (30) alter_statement -> ALTER ( VARIABLE . , operador , value ) ;

    ,               shift and go to state 104


state 80

    (31) alterb_statement -> ALTERB ( VARIABLE . ) ;

    )               shift and go to state 105


state 81

    (32) condition_statement -> expression COND_NUMERICA expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

    )               reduce using rule 32 (condition_statement -> expression COND_NUMERICA expression .)
    PROC            reduce using rule 32 (condition_statement -> expression COND_NUMERICA expression .)
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63


state 82

    (52) expression -> expression + expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    COND_NUMERICA   reduce using rule 52 (expression -> expression + expression .)
    )               reduce using rule 52 (expression -> expression + expression .)
    (               reduce using rule 52 (expression -> expression + expression .)
    PROC            reduce using rule 52 (expression -> expression + expression .)
    ;               reduce using rule 52 (expression -> expression + expression .)
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63

  ! +               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! -               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! *               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression + expression .) ]


state 83

    (53) expression -> expression - expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    COND_NUMERICA   reduce using rule 53 (expression -> expression - expression .)
    )               reduce using rule 53 (expression -> expression - expression .)
    (               reduce using rule 53 (expression -> expression - expression .)
    PROC            reduce using rule 53 (expression -> expression - expression .)
    ;               reduce using rule 53 (expression -> expression - expression .)
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63

  ! +               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! -               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! *               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression - expression .) ]


state 84

    (54) expression -> expression * expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    COND_NUMERICA   reduce using rule 54 (expression -> expression * expression .)
    )               reduce using rule 54 (expression -> expression * expression .)
    (               reduce using rule 54 (expression -> expression * expression .)
    PROC            reduce using rule 54 (expression -> expression * expression .)
    ;               reduce using rule 54 (expression -> expression * expression .)
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63

  ! +               [ reduce using rule 54 (expression -> expression * expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression * expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression * expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression * expression .) ]


state 85

    (55) expression -> expression / expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    COND_NUMERICA   reduce using rule 55 (expression -> expression / expression .)
    )               reduce using rule 55 (expression -> expression / expression .)
    (               reduce using rule 55 (expression -> expression / expression .)
    PROC            reduce using rule 55 (expression -> expression / expression .)
    ;               reduce using rule 55 (expression -> expression / expression .)
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63

  ! +               [ reduce using rule 55 (expression -> expression / expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression / expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression / expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression / expression .) ]


state 86

    (33) istrue_statement -> ISTRUE ( VARIABLE . ) ;

    )               shift and go to state 106


state 87

    (34) repeat_statement -> REPEAT ( code_block . break_statement ) ;
    (35) break_statement -> . BREAK ;
    (36) break_statement -> . empty
    (58) empty -> .

    BREAK           shift and go to state 108
    )               reduce using rule 58 (empty -> .)

    break_statement                shift and go to state 107
    empty                          shift and go to state 109

state 88

    (37) until_statement -> UNTIL code_block condition . ;

    ;               shift and go to state 110


state 89

    (38) condition -> expression . COND_NUMERICA expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

    COND_NUMERICA   shift and go to state 111
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63


state 90

    (39) while_statement -> WHILE expression ( . code_block ) ;
    (5) code_block -> . group_proc PROC master ( comentario statement code_block ) ;
    (6) code_block -> . group_proc PROC master ( comentario statement ) ;
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    code_block                     shift and go to state 112
    group_proc                     shift and go to state 7
    empty                          shift and go to state 9

state 91

    (40) case_statement -> CASE VARIABLE case_when_statements . else_statement ;
    (44) else_statement -> . ELSE code_block
    (45) else_statement -> . empty
    (58) empty -> .

    ELSE            shift and go to state 114
    ;               reduce using rule 58 (empty -> .)

    else_statement                 shift and go to state 113
    empty                          shift and go to state 115

state 92

    (41) case_when_statements -> case_when_statement . case_when_statements
    (41) case_when_statements -> . case_when_statement case_when_statements
    (42) case_when_statements -> . empty
    (43) case_when_statement -> . WHEN value THEN code_block
    (58) empty -> .

    WHEN            shift and go to state 94
    ELSE            reduce using rule 58 (empty -> .)
    ;               reduce using rule 58 (empty -> .)

    case_when_statement            shift and go to state 92
    case_when_statements           shift and go to state 116
    empty                          shift and go to state 93

state 93

    (42) case_when_statements -> empty .

    ELSE            reduce using rule 42 (case_when_statements -> empty .)
    ;               reduce using rule 42 (case_when_statements -> empty .)


state 94

    (43) case_when_statement -> WHEN . value THEN code_block
    (56) value -> . NUMERO
    (57) value -> . BOOL

    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    value                          shift and go to state 117

state 95

    (46) printvalues_statement -> PRINTVALUES ( VARIABLE . ) ;

    )               shift and go to state 118


state 96

    (47) signal_statement -> SIGNAL ( VARIABLE . , value ) ;

    ,               shift and go to state 119


state 97

    (48) viewsignal_statement -> VIEWSIGNAL ( VARIABLE . ) ;

    )               shift and go to state 120


state 98

    (5) code_block -> group_proc PROC master ( comentario statement code_block ) . ;

    ;               shift and go to state 121


state 99

    (6) code_block -> group_proc PROC master ( comentario statement ) ; .

    $end            reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    )               reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    VARIABLE        reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    (               reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    NUMERO          reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    BOOL            reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    BREAK           reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    ;               reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    WHEN            reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)
    ELSE            reduce using rule 6 (code_block -> group_proc PROC master ( comentario statement ) ; .)


state 100

    (8) group_proc -> PROC VARIABLE ( COMENTARIO statement code_block ) ; . group_proc
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    group_proc                     shift and go to state 122
    empty                          shift and go to state 9

state 101

    (9) group_proc -> PROC VARIABLE ( COMENTARIO statement ) ; group_proc .

    PROC            reduce using rule 9 (group_proc -> PROC VARIABLE ( COMENTARIO statement ) ; group_proc .)


state 102

    (28) new_variable_statement -> NEW VARIABLE , ( . DATATYPE , value ) ;

    DATATYPE        shift and go to state 123


state 103

    (29) values_statement -> VALUES ( VARIABLE , . value ) ;
    (56) value -> . NUMERO
    (57) value -> . BOOL

    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    value                          shift and go to state 124

state 104

    (30) alter_statement -> ALTER ( VARIABLE , . operador , value ) ;
    (11) operador -> . ADD
    (12) operador -> . SUB
    (13) operador -> . MUL
    (14) operador -> . DIV

    ADD             shift and go to state 126
    SUB             shift and go to state 127
    MUL             shift and go to state 128
    DIV             shift and go to state 129

    operador                       shift and go to state 125

state 105

    (31) alterb_statement -> ALTERB ( VARIABLE ) . ;

    ;               shift and go to state 130


state 106

    (33) istrue_statement -> ISTRUE ( VARIABLE ) . ;

    ;               shift and go to state 131


state 107

    (34) repeat_statement -> REPEAT ( code_block break_statement . ) ;

    )               shift and go to state 132


state 108

    (35) break_statement -> BREAK . ;

    ;               shift and go to state 133


state 109

    (36) break_statement -> empty .

    )               reduce using rule 36 (break_statement -> empty .)


state 110

    (37) until_statement -> UNTIL code_block condition ; .

    )               reduce using rule 37 (until_statement -> UNTIL code_block condition ; .)
    PROC            reduce using rule 37 (until_statement -> UNTIL code_block condition ; .)


state 111

    (38) condition -> expression COND_NUMERICA . expression
    (49) expression -> . value
    (50) expression -> . VARIABLE
    (51) expression -> . ( expression )
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) value -> . NUMERO
    (57) value -> . BOOL

    VARIABLE        shift and go to state 19
    (               shift and go to state 20
    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    expression                     shift and go to state 134
    value                          shift and go to state 36

state 112

    (39) while_statement -> WHILE expression ( code_block . ) ;

    )               shift and go to state 135


state 113

    (40) case_statement -> CASE VARIABLE case_when_statements else_statement . ;

    ;               shift and go to state 136


state 114

    (44) else_statement -> ELSE . code_block
    (5) code_block -> . group_proc PROC master ( comentario statement code_block ) ;
    (6) code_block -> . group_proc PROC master ( comentario statement ) ;
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    code_block                     shift and go to state 137
    group_proc                     shift and go to state 7
    empty                          shift and go to state 9

state 115

    (45) else_statement -> empty .

    ;               reduce using rule 45 (else_statement -> empty .)


state 116

    (41) case_when_statements -> case_when_statement case_when_statements .

    ELSE            reduce using rule 41 (case_when_statements -> case_when_statement case_when_statements .)
    ;               reduce using rule 41 (case_when_statements -> case_when_statement case_when_statements .)


state 117

    (43) case_when_statement -> WHEN value . THEN code_block

    THEN            shift and go to state 138


state 118

    (46) printvalues_statement -> PRINTVALUES ( VARIABLE ) . ;

    ;               shift and go to state 139


state 119

    (47) signal_statement -> SIGNAL ( VARIABLE , . value ) ;
    (56) value -> . NUMERO
    (57) value -> . BOOL

    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    value                          shift and go to state 140

state 120

    (48) viewsignal_statement -> VIEWSIGNAL ( VARIABLE ) . ;

    ;               shift and go to state 141


state 121

    (5) code_block -> group_proc PROC master ( comentario statement code_block ) ; .

    $end            reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    )               reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    VARIABLE        reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    (               reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    NUMERO          reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    BOOL            reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    BREAK           reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    ;               reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    WHEN            reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)
    ELSE            reduce using rule 5 (code_block -> group_proc PROC master ( comentario statement code_block ) ; .)


state 122

    (8) group_proc -> PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc .

    PROC            reduce using rule 8 (group_proc -> PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc .)


state 123

    (28) new_variable_statement -> NEW VARIABLE , ( DATATYPE . , value ) ;

    ,               shift and go to state 142


state 124

    (29) values_statement -> VALUES ( VARIABLE , value . ) ;

    )               shift and go to state 143


state 125

    (30) alter_statement -> ALTER ( VARIABLE , operador . , value ) ;

    ,               shift and go to state 144


state 126

    (11) operador -> ADD .

    ,               reduce using rule 11 (operador -> ADD .)


state 127

    (12) operador -> SUB .

    ,               reduce using rule 12 (operador -> SUB .)


state 128

    (13) operador -> MUL .

    ,               reduce using rule 13 (operador -> MUL .)


state 129

    (14) operador -> DIV .

    ,               reduce using rule 14 (operador -> DIV .)


state 130

    (31) alterb_statement -> ALTERB ( VARIABLE ) ; .

    )               reduce using rule 31 (alterb_statement -> ALTERB ( VARIABLE ) ; .)
    PROC            reduce using rule 31 (alterb_statement -> ALTERB ( VARIABLE ) ; .)


state 131

    (33) istrue_statement -> ISTRUE ( VARIABLE ) ; .

    )               reduce using rule 33 (istrue_statement -> ISTRUE ( VARIABLE ) ; .)
    PROC            reduce using rule 33 (istrue_statement -> ISTRUE ( VARIABLE ) ; .)


state 132

    (34) repeat_statement -> REPEAT ( code_block break_statement ) . ;

    ;               shift and go to state 145


state 133

    (35) break_statement -> BREAK ; .

    )               reduce using rule 35 (break_statement -> BREAK ; .)


state 134

    (38) condition -> expression COND_NUMERICA expression .
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression

    ;               reduce using rule 38 (condition -> expression COND_NUMERICA expression .)
    +               shift and go to state 60
    -               shift and go to state 61
    *               shift and go to state 62
    /               shift and go to state 63


state 135

    (39) while_statement -> WHILE expression ( code_block ) . ;

    ;               shift and go to state 146


state 136

    (40) case_statement -> CASE VARIABLE case_when_statements else_statement ; .

    )               reduce using rule 40 (case_statement -> CASE VARIABLE case_when_statements else_statement ; .)
    PROC            reduce using rule 40 (case_statement -> CASE VARIABLE case_when_statements else_statement ; .)


state 137

    (44) else_statement -> ELSE code_block .

    ;               reduce using rule 44 (else_statement -> ELSE code_block .)


state 138

    (43) case_when_statement -> WHEN value THEN . code_block
    (5) code_block -> . group_proc PROC master ( comentario statement code_block ) ;
    (6) code_block -> . group_proc PROC master ( comentario statement ) ;
    (8) group_proc -> . PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc
    (9) group_proc -> . PROC VARIABLE ( COMENTARIO statement ) ; group_proc
    (10) group_proc -> . empty
    (58) empty -> .

  ! shift/reduce conflict for PROC resolved as shift
    PROC            shift and go to state 8

  ! PROC            [ reduce using rule 58 (empty -> .) ]

    code_block                     shift and go to state 147
    group_proc                     shift and go to state 7
    empty                          shift and go to state 9

state 139

    (46) printvalues_statement -> PRINTVALUES ( VARIABLE ) ; .

    )               reduce using rule 46 (printvalues_statement -> PRINTVALUES ( VARIABLE ) ; .)
    PROC            reduce using rule 46 (printvalues_statement -> PRINTVALUES ( VARIABLE ) ; .)


state 140

    (47) signal_statement -> SIGNAL ( VARIABLE , value . ) ;

    )               shift and go to state 148


state 141

    (48) viewsignal_statement -> VIEWSIGNAL ( VARIABLE ) ; .

    )               reduce using rule 48 (viewsignal_statement -> VIEWSIGNAL ( VARIABLE ) ; .)
    PROC            reduce using rule 48 (viewsignal_statement -> VIEWSIGNAL ( VARIABLE ) ; .)


state 142

    (28) new_variable_statement -> NEW VARIABLE , ( DATATYPE , . value ) ;
    (56) value -> . NUMERO
    (57) value -> . BOOL

    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    value                          shift and go to state 149

state 143

    (29) values_statement -> VALUES ( VARIABLE , value ) . ;

    ;               shift and go to state 150


state 144

    (30) alter_statement -> ALTER ( VARIABLE , operador , . value ) ;
    (56) value -> . NUMERO
    (57) value -> . BOOL

    NUMERO          shift and go to state 49
    BOOL            shift and go to state 50

    value                          shift and go to state 151

state 145

    (34) repeat_statement -> REPEAT ( code_block break_statement ) ; .

    )               reduce using rule 34 (repeat_statement -> REPEAT ( code_block break_statement ) ; .)
    PROC            reduce using rule 34 (repeat_statement -> REPEAT ( code_block break_statement ) ; .)


state 146

    (39) while_statement -> WHILE expression ( code_block ) ; .

    )               reduce using rule 39 (while_statement -> WHILE expression ( code_block ) ; .)
    PROC            reduce using rule 39 (while_statement -> WHILE expression ( code_block ) ; .)


state 147

    (43) case_when_statement -> WHEN value THEN code_block .

    WHEN            reduce using rule 43 (case_when_statement -> WHEN value THEN code_block .)
    ELSE            reduce using rule 43 (case_when_statement -> WHEN value THEN code_block .)
    ;               reduce using rule 43 (case_when_statement -> WHEN value THEN code_block .)


state 148

    (47) signal_statement -> SIGNAL ( VARIABLE , value ) . ;

    ;               shift and go to state 152


state 149

    (28) new_variable_statement -> NEW VARIABLE , ( DATATYPE , value . ) ;

    )               shift and go to state 153


state 150

    (29) values_statement -> VALUES ( VARIABLE , value ) ; .

    )               reduce using rule 29 (values_statement -> VALUES ( VARIABLE , value ) ; .)
    PROC            reduce using rule 29 (values_statement -> VALUES ( VARIABLE , value ) ; .)


state 151

    (30) alter_statement -> ALTER ( VARIABLE , operador , value . ) ;

    )               shift and go to state 154


state 152

    (47) signal_statement -> SIGNAL ( VARIABLE , value ) ; .

    )               reduce using rule 47 (signal_statement -> SIGNAL ( VARIABLE , value ) ; .)
    PROC            reduce using rule 47 (signal_statement -> SIGNAL ( VARIABLE , value ) ; .)


state 153

    (28) new_variable_statement -> NEW VARIABLE , ( DATATYPE , value ) . ;

    ;               shift and go to state 155


state 154

    (30) alter_statement -> ALTER ( VARIABLE , operador , value ) . ;

    ;               shift and go to state 156


state 155

    (28) new_variable_statement -> NEW VARIABLE , ( DATATYPE , value ) ; .

    )               reduce using rule 28 (new_variable_statement -> NEW VARIABLE , ( DATATYPE , value ) ; .)
    PROC            reduce using rule 28 (new_variable_statement -> NEW VARIABLE , ( DATATYPE , value ) ; .)


state 156

    (30) alter_statement -> ALTER ( VARIABLE , operador , value ) ; .

    )               reduce using rule 30 (alter_statement -> ALTER ( VARIABLE , operador , value ) ; .)
    PROC            reduce using rule 30 (alter_statement -> ALTER ( VARIABLE , operador , value ) ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PROC in state 2 resolved as shift
WARNING: shift/reduce conflict for PROC in state 21 resolved as shift
WARNING: shift/reduce conflict for PROC in state 43 resolved as shift
WARNING: shift/reduce conflict for PROC in state 51 resolved as shift
WARNING: shift/reduce conflict for PROC in state 65 resolved as shift
WARNING: shift/reduce conflict for PROC in state 76 resolved as shift
WARNING: shift/reduce conflict for + in state 82 resolved as shift
WARNING: shift/reduce conflict for - in state 82 resolved as shift
WARNING: shift/reduce conflict for * in state 82 resolved as shift
WARNING: shift/reduce conflict for / in state 82 resolved as shift
WARNING: shift/reduce conflict for + in state 83 resolved as shift
WARNING: shift/reduce conflict for - in state 83 resolved as shift
WARNING: shift/reduce conflict for * in state 83 resolved as shift
WARNING: shift/reduce conflict for / in state 83 resolved as shift
WARNING: shift/reduce conflict for + in state 84 resolved as shift
WARNING: shift/reduce conflict for - in state 84 resolved as shift
WARNING: shift/reduce conflict for * in state 84 resolved as shift
WARNING: shift/reduce conflict for / in state 84 resolved as shift
WARNING: shift/reduce conflict for + in state 85 resolved as shift
WARNING: shift/reduce conflict for - in state 85 resolved as shift
WARNING: shift/reduce conflict for * in state 85 resolved as shift
WARNING: shift/reduce conflict for / in state 85 resolved as shift
WARNING: shift/reduce conflict for PROC in state 90 resolved as shift
WARNING: shift/reduce conflict for PROC in state 100 resolved as shift
WARNING: shift/reduce conflict for PROC in state 114 resolved as shift
WARNING: shift/reduce conflict for PROC in state 138 resolved as shift
