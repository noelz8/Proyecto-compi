
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADD ALTER ALTERB ARROBA BOOL BREAK CALL CASE COMA COMENTARIO COMILLAS COND_NUMERICA DATATYPE DER_EXCLAMACION DER_INTERROGACION DISTINTO_QUE DIV DIVISION ELSE ENYE FALSE GUION ID IGUAL IGUALDAD ISTRUE IZQ_EXCLAMACION IZQ_INTERROGACION LETRA LPARENTESIS MASTER MAYOR_IGUAL_QUE MAYOR_QUE MAYUSCULA MENOR_IGUAL_QUE MENOR_QUE MUL MULTIPLICACION NEW NUMERO PRINTVALUES PROC PUNTO PUNTO_COMA REPEAT RESTA RPARENTESIS SIGNAL STRING SUB SUMA THEN TILDE TRUE UNDERSCORE UNTIL VALUES VARIABLE VIEWSIGNAL WHEN WHILE\n    program : lista_comentarios code_block\n    \n    lista_comentarios : comentario lista_comentarios\n                 | empty\n    \n    comentario : COMENTARIO\n    \n    code_block : group_proc PROC master '(' comentario statement code_block ')' ';'\n               | group_proc PROC master '(' comentario statement ')' ';'\n    \n    master : MASTER\n    \n    group_proc : PROC VARIABLE '(' COMENTARIO statement code_block ')' ';' group_proc\n               | PROC VARIABLE '(' COMENTARIO statement ')' ';' group_proc\n               | empty\n    \n    operador : ADD\n            | SUB\n            | MUL\n            | DIV\n    \n    statement : new_variable_statement\n              | values_statement\n              | alter_statement\n              | alterb_statement\n              | condition_statement\n              | istrue_statement\n              | repeat_statement\n              | until_statement\n              | while_statement\n              | case_statement\n              | printvalues_statement\n              | signal_statement\n              | viewsignal_statement\n    \n    new_variable_statement : NEW VARIABLE ',' '(' DATATYPE ',' value ')' ';'\n    \n    values_statement : VALUES '(' VARIABLE ',' value ')' ';'\n    \n    alter_statement : ALTER '(' VARIABLE ',' operador ',' value ')' ';'\n    \n    alterb_statement : ALTERB '(' VARIABLE ')' ';'\n    \n    condition_statement : expression COND_NUMERICA expression\n    \n    istrue_statement : ISTRUE '(' VARIABLE ')' ';'\n    \n    repeat_statement : REPEAT '(' code_block break_statement ')' ';'\n    \n    break_statement : BREAK ';'\n                    | empty\n    \n    until_statement : UNTIL code_block condition ';'\n    \n    condition : expression COND_NUMERICA expression\n    \n    while_statement : WHILE expression '(' code_block ')' ';'\n    \n    case_statement : CASE VARIABLE case_when_statements else_statement ';'\n    \n    case_when_statements : case_when_statement case_when_statements\n                         | empty\n    \n    case_when_statement : WHEN value THEN code_block\n    \n    else_statement : ELSE code_block\n                   | empty\n    \n    printvalues_statement : PRINTVALUES '(' VARIABLE ')' ';'\n    \n    signal_statement : SIGNAL '(' VARIABLE ',' value ')' ';'\n    \n    viewsignal_statement : VIEWSIGNAL '(' VARIABLE ')' ';'\n    \n    expression : value\n               | VARIABLE\n               | '(' expression ')'\n               | expression '+' expression\n               | expression '-' expression\n               | expression '*' expression\n               | expression '/' expression\n    \n    value : NUMERO\n          | BOOL\n    \n    empty :\n    "
    
_lr_action_items = {'COMENTARIO':([0,3,5,15,16,],[5,5,-4,17,5,]),'PROC':([0,2,3,4,5,7,9,10,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,43,49,50,51,65,74,76,81,82,83,84,85,90,100,101,110,114,122,130,131,136,138,139,141,145,146,150,152,155,156,],[-58,8,-58,-3,-4,11,-10,-2,-50,8,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-49,8,-56,-57,8,8,-51,8,-32,-52,-53,-54,-55,8,8,-9,-37,8,-8,-31,-33,-40,8,-46,-48,-34,-39,-29,-47,-28,-30,]),'$end':([1,6,99,121,],[0,-1,-6,-5,]),'NEW':([5,17,18,],[-4,35,35,]),'VALUES':([5,17,18,],[-4,37,37,]),'ALTER':([5,17,18,],[-4,38,38,]),'ALTERB':([5,17,18,],[-4,39,39,]),'ISTRUE':([5,17,18,],[-4,41,41,]),'REPEAT':([5,17,18,],[-4,42,42,]),'UNTIL':([5,17,18,],[-4,43,43,]),'WHILE':([5,17,18,],[-4,44,44,]),'CASE':([5,17,18,],[-4,45,45,]),'PRINTVALUES':([5,17,18,],[-4,46,46,]),'SIGNAL':([5,17,18,],[-4,47,47,]),'VIEWSIGNAL':([5,17,18,],[-4,48,48,]),'VARIABLE':([5,8,17,18,20,35,44,45,56,57,58,59,60,61,62,63,64,66,69,70,71,99,111,121,],[-4,12,19,19,19,55,19,68,78,79,80,19,19,19,19,19,86,19,95,96,97,-6,19,-5,]),'(':([5,12,13,14,17,18,19,20,36,37,38,39,41,42,44,46,47,48,49,50,59,60,61,62,63,66,67,74,77,82,83,84,85,99,111,121,],[-4,15,16,-7,20,20,-50,20,-49,56,57,58,64,65,20,69,70,71,-56,-57,20,20,20,20,20,20,90,-51,102,-52,-53,-54,-55,-6,20,-5,]),'NUMERO':([5,17,18,20,44,59,60,61,62,63,66,94,99,103,111,119,121,142,144,],[-4,49,49,49,49,49,49,49,49,49,49,49,-6,49,49,49,-5,49,49,]),'BOOL':([5,17,18,20,44,59,60,61,62,63,66,94,99,103,111,119,121,142,144,],[-4,50,50,50,50,50,50,50,50,50,50,50,-6,50,50,50,-5,50,50,]),'MASTER':([11,],[14,]),'COND_NUMERICA':([19,36,40,49,50,74,82,83,84,85,89,],[-50,-49,59,-56,-57,-51,-52,-53,-54,-55,111,]),'+':([19,36,40,49,50,52,67,74,81,82,83,84,85,89,134,],[-50,-49,60,-56,-57,60,60,-51,60,60,60,60,60,60,60,]),'-':([19,36,40,49,50,52,67,74,81,82,83,84,85,89,134,],[-50,-49,61,-56,-57,61,61,-51,61,61,61,61,61,61,61,]),'*':([19,36,40,49,50,52,67,74,81,82,83,84,85,89,134,],[-50,-49,62,-56,-57,62,62,-51,62,62,62,62,62,62,62,]),'/':([19,36,40,49,50,52,67,74,81,82,83,84,85,89,134,],[-50,-49,63,-56,-57,63,63,-51,63,63,63,63,63,63,63,]),')':([19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,49,50,51,52,53,72,74,80,81,82,83,84,85,86,87,95,97,99,107,109,110,112,121,124,130,131,133,136,139,140,141,145,146,149,150,151,152,155,156,],[-50,54,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-49,-56,-57,73,74,75,98,-51,105,-32,-52,-53,-54,-55,106,-58,118,120,-6,132,-36,-37,135,-5,143,-31,-33,-35,-40,-46,148,-48,-34,-39,153,-29,154,-47,-28,-30,]),';':([19,36,49,50,54,68,73,74,75,82,83,84,85,88,91,92,93,98,99,105,106,108,113,115,116,118,120,121,132,134,135,137,143,147,148,153,154,],[-50,-49,-56,-57,76,-58,99,-51,100,-52,-53,-54,-55,110,-58,-58,-42,121,-6,130,131,133,136,-45,-41,139,141,-5,145,-38,146,-44,150,-43,152,155,156,]),'THEN':([49,50,117,],[-56,-57,138,]),',':([55,78,79,96,123,125,126,127,128,129,],[77,103,104,119,142,144,-11,-12,-13,-14,]),'WHEN':([68,92,99,121,147,],[94,94,-6,-5,-43,]),'ELSE':([68,91,92,93,99,116,121,147,],[-58,114,-58,-42,-6,-41,-5,-43,]),'BREAK':([87,99,121,],[108,-6,-5,]),'DATATYPE':([102,],[123,]),'ADD':([104,],[126,]),'SUB':([104,],[127,]),'MUL':([104,],[128,]),'DIV':([104,],[129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'lista_comentarios':([0,3,],[2,10,]),'comentario':([0,3,16,],[3,3,18,]),'empty':([0,2,3,21,43,51,65,68,76,87,90,91,92,100,114,138,],[4,9,4,9,9,9,9,93,9,109,9,115,93,9,9,9,]),'code_block':([2,21,43,51,65,90,114,138,],[6,53,66,72,87,112,137,147,]),'group_proc':([2,21,43,51,65,76,90,100,114,138,],[7,7,7,7,7,101,7,122,7,7,]),'master':([11,],[13,]),'statement':([17,18,],[21,51,]),'new_variable_statement':([17,18,],[22,22,]),'values_statement':([17,18,],[23,23,]),'alter_statement':([17,18,],[24,24,]),'alterb_statement':([17,18,],[25,25,]),'condition_statement':([17,18,],[26,26,]),'istrue_statement':([17,18,],[27,27,]),'repeat_statement':([17,18,],[28,28,]),'until_statement':([17,18,],[29,29,]),'while_statement':([17,18,],[30,30,]),'case_statement':([17,18,],[31,31,]),'printvalues_statement':([17,18,],[32,32,]),'signal_statement':([17,18,],[33,33,]),'viewsignal_statement':([17,18,],[34,34,]),'value':([17,18,20,44,59,60,61,62,63,66,94,103,111,119,142,144,],[36,36,36,36,36,36,36,36,36,36,117,124,36,140,149,151,]),'expression':([17,18,20,44,59,60,61,62,63,66,111,],[40,40,52,67,81,82,83,84,85,89,134,]),'condition':([66,],[88,]),'case_when_statements':([68,92,],[91,116,]),'case_when_statement':([68,92,],[92,92,]),'break_statement':([87,],[107,]),'else_statement':([91,],[113,]),'operador':([104,],[125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> lista_comentarios code_block','program',2,'p_program','yacc_parser.py',7),
  ('lista_comentarios -> comentario lista_comentarios','lista_comentarios',2,'p_lista_comentarios','yacc_parser.py',13),
  ('lista_comentarios -> empty','lista_comentarios',1,'p_lista_comentarios','yacc_parser.py',14),
  ('comentario -> COMENTARIO','comentario',1,'p_comentario','yacc_parser.py',20),
  ('code_block -> group_proc PROC master ( comentario statement code_block ) ;','code_block',9,'p_code_block','yacc_parser.py',26),
  ('code_block -> group_proc PROC master ( comentario statement ) ;','code_block',8,'p_code_block','yacc_parser.py',27),
  ('master -> MASTER','master',1,'p_master','yacc_parser.py',33),
  ('group_proc -> PROC VARIABLE ( COMENTARIO statement code_block ) ; group_proc','group_proc',9,'p_group_proc','yacc_parser.py',39),
  ('group_proc -> PROC VARIABLE ( COMENTARIO statement ) ; group_proc','group_proc',8,'p_group_proc','yacc_parser.py',40),
  ('group_proc -> empty','group_proc',1,'p_group_proc','yacc_parser.py',41),
  ('operador -> ADD','operador',1,'p_operador','yacc_parser.py',48),
  ('operador -> SUB','operador',1,'p_operador','yacc_parser.py',49),
  ('operador -> MUL','operador',1,'p_operador','yacc_parser.py',50),
  ('operador -> DIV','operador',1,'p_operador','yacc_parser.py',51),
  ('statement -> new_variable_statement','statement',1,'p_statement','yacc_parser.py',55),
  ('statement -> values_statement','statement',1,'p_statement','yacc_parser.py',56),
  ('statement -> alter_statement','statement',1,'p_statement','yacc_parser.py',57),
  ('statement -> alterb_statement','statement',1,'p_statement','yacc_parser.py',58),
  ('statement -> condition_statement','statement',1,'p_statement','yacc_parser.py',59),
  ('statement -> istrue_statement','statement',1,'p_statement','yacc_parser.py',60),
  ('statement -> repeat_statement','statement',1,'p_statement','yacc_parser.py',61),
  ('statement -> until_statement','statement',1,'p_statement','yacc_parser.py',62),
  ('statement -> while_statement','statement',1,'p_statement','yacc_parser.py',63),
  ('statement -> case_statement','statement',1,'p_statement','yacc_parser.py',64),
  ('statement -> printvalues_statement','statement',1,'p_statement','yacc_parser.py',65),
  ('statement -> signal_statement','statement',1,'p_statement','yacc_parser.py',66),
  ('statement -> viewsignal_statement','statement',1,'p_statement','yacc_parser.py',67),
  ('new_variable_statement -> NEW VARIABLE , ( DATATYPE , value ) ;','new_variable_statement',9,'p_new_variable_statement','yacc_parser.py',73),
  ('values_statement -> VALUES ( VARIABLE , value ) ;','values_statement',7,'p_values_statement','yacc_parser.py',79),
  ('alter_statement -> ALTER ( VARIABLE , operador , value ) ;','alter_statement',9,'p_alter_statement','yacc_parser.py',85),
  ('alterb_statement -> ALTERB ( VARIABLE ) ;','alterb_statement',5,'p_alterb_statement','yacc_parser.py',91),
  ('condition_statement -> expression COND_NUMERICA expression','condition_statement',3,'p_condition_statement','yacc_parser.py',97),
  ('istrue_statement -> ISTRUE ( VARIABLE ) ;','istrue_statement',5,'p_istrue_statement','yacc_parser.py',103),
  ('repeat_statement -> REPEAT ( code_block break_statement ) ;','repeat_statement',6,'p_repeat_statement','yacc_parser.py',109),
  ('break_statement -> BREAK ;','break_statement',2,'p_break_statement','yacc_parser.py',115),
  ('break_statement -> empty','break_statement',1,'p_break_statement','yacc_parser.py',116),
  ('until_statement -> UNTIL code_block condition ;','until_statement',4,'p_until_statement','yacc_parser.py',122),
  ('condition -> expression COND_NUMERICA expression','condition',3,'p_condition','yacc_parser.py',127),
  ('while_statement -> WHILE expression ( code_block ) ;','while_statement',6,'p_while_statement','yacc_parser.py',132),
  ('case_statement -> CASE VARIABLE case_when_statements else_statement ;','case_statement',5,'p_case_statement','yacc_parser.py',138),
  ('case_when_statements -> case_when_statement case_when_statements','case_when_statements',2,'p_case_when_statements','yacc_parser.py',143),
  ('case_when_statements -> empty','case_when_statements',1,'p_case_when_statements','yacc_parser.py',144),
  ('case_when_statement -> WHEN value THEN code_block','case_when_statement',4,'p_case_when_statement','yacc_parser.py',149),
  ('else_statement -> ELSE code_block','else_statement',2,'p_else_statement','yacc_parser.py',155),
  ('else_statement -> empty','else_statement',1,'p_else_statement','yacc_parser.py',156),
  ('printvalues_statement -> PRINTVALUES ( VARIABLE ) ;','printvalues_statement',5,'p_printvalues_statement','yacc_parser.py',162),
  ('signal_statement -> SIGNAL ( VARIABLE , value ) ;','signal_statement',7,'p_signal_statement','yacc_parser.py',168),
  ('viewsignal_statement -> VIEWSIGNAL ( VARIABLE ) ;','viewsignal_statement',5,'p_viewsignal_statement','yacc_parser.py',174),
  ('expression -> value','expression',1,'p_expression','yacc_parser.py',180),
  ('expression -> VARIABLE','expression',1,'p_expression','yacc_parser.py',181),
  ('expression -> ( expression )','expression',3,'p_expression','yacc_parser.py',182),
  ('expression -> expression + expression','expression',3,'p_expression','yacc_parser.py',183),
  ('expression -> expression - expression','expression',3,'p_expression','yacc_parser.py',184),
  ('expression -> expression * expression','expression',3,'p_expression','yacc_parser.py',185),
  ('expression -> expression / expression','expression',3,'p_expression','yacc_parser.py',186),
  ('value -> NUMERO','value',1,'p_value','yacc_parser.py',192),
  ('value -> BOOL','value',1,'p_value','yacc_parser.py',193),
  ('empty -> <empty>','empty',0,'p_empty','yacc_parser.py',199),
]
